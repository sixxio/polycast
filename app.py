# importing modules
import cs as scaling, requests as rq, pandas as pd, plotly.express as px, re, streamlit as st, numpy as np, json, datetime
from tensorflow import keras

# setting page params
st.set_page_config(
    page_title="Polycast",
    page_icon="üìà",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={'About': 'Developed by @sixxio as diploma project in 2023.'}
)

# disabling loading pic
st.markdown('<style>.css-4z1n4l {display:none}</style', unsafe_allow_html = True)

# defining headers for parsing
headers = {"Accept":"text/html", "Accept-Language":"en-US", "Referer":"https://www.nasdaq.com/", "User-Agent":"Chrome/64.0.3282.119"} 

# importing tickers
file = open('tickers.json','r')
tickers = json.loads(file.read())
file.close()

dayly, minutly = st.tabs(['–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ','–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ'])

with dayly:
    # defining interface elements
    chart, filter = st.columns([5,1])
    with filter:
        c = st.selectbox('–ö–æ–º–ø–∞–Ω–∏—è', options=tickers['medium'])
        h = st.slider('–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è', min_value=1, max_value=30, step=1)
    df = st.expander('–°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ')

    # fetching and parsing data from nasdaq
    resp = rq.get(f'https://api.nasdaq.com/api/quote/{c}/chart?assetclass=stocks&fromdate=2013-02-02&todate={datetime.datetime.now().strftime("%Y-%m-%d")}', headers=headers, verify=True)
    smth = json.loads(re.search('\[.*\]', resp.text).group())
    cur_tick_data = pd.DataFrame([smth[k]['z'] for k in range(len(smth))]).drop(columns='value')

    # providing dtypes, renaming columns
    for i in ['open', 'close', 'high','low','volume']:
        cur_tick_data[i] = pd.to_numeric(cur_tick_data[i].str.replace(',',''))
    cur_tick_data['dateTime'] = pd.to_datetime(cur_tick_data['dateTime'])
    cur_tick_data.columns = ['–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, $', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å, $', '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–æ—Ä–≥–æ–≤, $', '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–æ—Ä–≥–æ–≤, $', '–û–±—ä–µ–º', '–î–∞—Ç–∞']
    cur_tick_data['–¢–∏–ø'] = '–ò—Å—Ç–æ—Ä–∏—è'

    # showing df with historical data
    with df:
        st.dataframe(cur_tick_data, use_container_width=True)

    # extracting initial data for forecasting
    date = datetime.datetime.strptime(str(cur_tick_data['–î–∞—Ç–∞'].iloc[-1]), '%Y-%m-%d %H:%M:%S')
    dates = [(date + datetime.timedelta(days=i)).strftime('%m-%d-%Y') for i in range(h+1)]
    prices = cur_tick_data['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–æ—Ä–≥–æ–≤, $'].iloc[-20:].tolist()

    # loading model and scaler, forecasting price
    model = keras.models.load_model('model.h5')
    cs = scaling.CustomScaler((13.947505579, 180.33)).fit(cur_tick_data['–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–æ—Ä–≥–æ–≤, $'])
    for i in range(h):
        prices += cs.unscale(model.predict(cs.scale(np.array(prices[-20:]).reshape((1,20,1))), verbose=0).reshape(-1)).tolist()

    # concating forecast to historical data
    future = pd.DataFrame({'–î–∞—Ç–∞' : dates, '–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–æ—Ä–≥–æ–≤, $': prices[19:], '–¢–∏–ø': ['–ü—Ä–æ–≥–Ω–æ–∑']*(h+1)})
    future['–î–∞—Ç–∞'] = pd.to_datetime(future['–î–∞—Ç–∞'])
    current_ticker_df = pd.concat([cur_tick_data, future])

    # plotting chart with forecast
    with chart:
        st.plotly_chart(px.line(current_ticker_df, x='–î–∞—Ç–∞', y='–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–æ—Ä–≥–æ–≤, $', color = '–¢–∏–ø'), use_container_width=True)

with minutly:
    chart, filter = st.columns([5,1])
    with filter:
        hh_sh = st.selectbox('–ì—Ä—É–ø–ø–∞ –∫–æ–º–ø–∞–Ω–∏–π', options=list(tickers.keys()), key='short1')
        c_sh = st.selectbox('–ö–æ–º–ø–∞–Ω–∏—è', options=tickers[hh_sh], key='short2')
        h_sh = st.slider('–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è', min_value=1, max_value=30, step=1, key='short3')
    df = st.expander('–°–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ')

    # fetching and parsing data from nasdaq
    resp = rq.get(f'https://charting.nasdaq.com/data/charting/intraday?symbol={c_sh}&mostRecent=15&includeLatestIntradayData=1&', headers=headers, verify=True)
    cur_tick_data = pd.DataFrame(json.loads(resp.text[resp.text.find('['):resp.text.find(']')+1]))

    # providing dtypes, renaming columns
    cur_tick_data['Date'] = pd.to_datetime(cur_tick_data['Date'])
    cur_tick_data.columns = ['–í—Ä–µ–º—è', '–°—Ç–æ–∏–º–æ—Å—Ç—å, $', '–û–±—ä–µ–º']
    cur_tick_data['–¢–∏–ø'] = '–ò—Å—Ç–æ—Ä–∏—è'

    # showing df with historical data
    with df:
        st.dataframe(cur_tick_data, use_container_width=True)

    # extracting initial data for forecasting
    date = datetime.datetime.strptime(str(cur_tick_data['–í—Ä–µ–º—è'].iloc[-1]), '%Y-%m-%d %H:%M:%S')
    dates = [(date + datetime.timedelta(minutes=i)).strftime('%m-%d-%Y  %H:%M:%S') for i in range(h_sh+1)]
    prices = cur_tick_data['–°—Ç–æ–∏–º–æ—Å—Ç—å, $'].iloc[-20:].tolist()

    # loading model and scaler, forecasting price
    model = keras.models.load_model('model.h5')
    cs = scaling.CustomScaler((13.947505579, 180.33)).fit(cur_tick_data['–°—Ç–æ–∏–º–æ—Å—Ç—å, $'])
    for i in range(h_sh):
        prices += cs.unscale(model.predict(cs.scale(np.array(prices[-20:]).reshape((1,20,1))), verbose=0).reshape(-1)).tolist()

    # concating forecast to historical data
    future = pd.DataFrame({'–í—Ä–µ–º—è' : dates, '–°—Ç–æ–∏–º–æ—Å—Ç—å, $': prices[19:], '–¢–∏–ø': ['–ü—Ä–æ–≥–Ω–æ–∑']*(h_sh+1)})
    future['–í—Ä–µ–º—è'] = pd.to_datetime(future['–í—Ä–µ–º—è'])
    current_ticker_df = pd.concat([cur_tick_data, future], ignore_index=True)

    # plotting chart with forecast
    with chart:
        st.plotly_chart(px.line(current_ticker_df.loc[current_ticker_df['–í—Ä–µ–º—è'] > date.strftime('%m-%d-%Y'), :], x='–í—Ä–µ–º—è', y='–°—Ç–æ–∏–º–æ—Å—Ç—å, $', color = '–¢–∏–ø'), use_container_width=True)